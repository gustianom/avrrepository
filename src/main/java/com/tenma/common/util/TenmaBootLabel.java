package com.tenma.common.util;

import com.tenma.auth.util.Converter;
import com.tenma.common.bean.lang_label_value.LangLabelValueHelper;
import com.tenma.common.model.LangLabelValueModel;

import java.io.*;
import java.net.URL;
import java.net.URLDecoder;
import java.util.*;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Created by ndwijaya on 11/26/14.
 */
public class TenmaBootLabel {
    private static TenmaBootLabel instance;
    private ConcurrentHashMap labelMap = new ConcurrentHashMap();

    public TenmaBootLabel() {
        labelMap = new ConcurrentHashMap();
    }

    public static TenmaBootLabel getInstance() {
        if (instance == null) {
            instance = new TenmaBootLabel();
        }
        return instance;
    }

    private String getPhisicalFolder() throws UnsupportedEncodingException {
        URL r = this.getClass().getResource("/");
        String decoded = URLDecoder.decode(r.getFile(), "UTF-8");
        if (!decoded.startsWith("/")) {
            decoded = File.separator + decoded;
        }
        return decoded;
    }

    public boolean loadingPropertiLabel(String langcode) {

        boolean status = false;
        try {
            File file = new File(new StringBuffer().append(getPhisicalFolder()).append("tenmaboot_").append(langcode).append(".properties").toString());
            FileInputStream fileInput = new FileInputStream(file);
            Properties properties = new Properties();
            properties.load(fileInput);
            fileInput.close();

            Enumeration enuKeys = properties.keys();
            while (enuKeys.hasMoreElements()) {
                String key = (String) enuKeys.nextElement();
                key = key.toLowerCase();
                String value = properties.getProperty(key);

                labelMap.put(langcode + key, value);
            }
            status = true;
        } catch (FileNotFoundException e) {
            System.out.println("File not found =" + e.getMessage());
            System.out.println("Rebuild properti file...");
            if (rebuildPropertiLabel()) System.out.println("Rebuild properti file success");
        } catch (IOException e) {
            e.printStackTrace();
        }
        return status;
    }

    public synchronized String getLabel(String communityId, String langCode, String key) {
        StringBuffer keyCommunity = new StringBuffer().append(langCode);
        StringBuffer keyOri = new StringBuffer().append(langCode);

        if (key != null) {
            key = key.toLowerCase();
            keyCommunity.append(key);
            keyOri.append(key);
            if (communityId != null && communityId.trim().length() != 0)
                keyCommunity.append(".").append(communityId);
        } else
            key = "";


        String label = null;

//            System.out.println("TenmaBootLabel.getLabel COMMUNITY " + keyCommunity.toString()+ " --> " + );
//            System.out.println("TenmaBootLabel.getLabel ORI " + keyOri.toString()+ " --> " + labelMap.get(keyOri.toString()));
//        System.out.println(keyCommunity.toString() + " LABEL MAP "+labelMap );


        label = (String) labelMap.get(keyCommunity.toString());
        if (label == null)
            label = (String) labelMap.get(keyOri.toString());

//        System.out.println("TenmaBootLabel.getLabel --------------------> "+key + " -- "+label);
        if (label == null) {
            return key;
        } else {
            return label;
        }
    }

    public boolean rebuildPropertiLabel() {
        labelMap = new ConcurrentHashMap();
        boolean status = false;
        try {
            LangLabelValueHelper lblhelper = new LangLabelValueHelper();
            Properties properties = new Properties();
            HashMap map = new HashMap();
            map.put("langId", 1); // english
            List<LangLabelValueModel> ls = lblhelper.getListRenderer(map, false);
//            System.out.println("ls.size() = " + ls.size());
            for (LangLabelValueModel m : ls) {
//                System.out.println(m.getLabelName()+"="+m.getLabelValue());

                StringBuffer key = new StringBuffer()
                        .append(m.getLabelName().trim().toLowerCase());

                if (m.getCommunityId() != null)
                    key.append(".").append(m.getCommunityId());

                properties.setProperty(key.toString(), m.getLabelValue());
                labelMap.put("en" + key.toString(), m.getLabelValue());
            }
            File file = new File(new StringBuffer().append(getPhisicalFolder()).append("tenmaboot_en.properties").toString());
            FileOutputStream fileOut = new FileOutputStream(file, true); //overwrite file
            properties.store(fileOut, "Generated by System" + Converter.dateToString(Calendar.getInstance().getTime(), "YYYY-MMM-DD HH:mm"));
            fileOut.close();

        } catch (IOException e) {
            e.printStackTrace();
        }

        try {
            LangLabelValueHelper lblhelper = new LangLabelValueHelper();
            Properties properties = new Properties();
            HashMap map = new HashMap();
            map.put("langId", 6); // indonesia
            List<LangLabelValueModel> ls = lblhelper.getListRenderer(map, false);
//            System.out.println("ls.size() = " + ls.size());
            for (LangLabelValueModel m : ls) {
//                System.out.println(m.getLabelName()+"="+m.getLabelValue());
                StringBuffer key = new StringBuffer()
                        .append(m.getLabelName().trim().toLowerCase());

                if (m.getCommunityId() != null)
                    key.append(".").append(m.getCommunityId());


                properties.setProperty(key.toString(), m.getLabelValue());
                labelMap.put("in" + key.toString(), m.getLabelValue());
            }
            File file = new File(new StringBuffer().append(getPhisicalFolder()).append("tenmaboot_in.properties").toString());
            FileOutputStream fileOut = new FileOutputStream(file, true); //overwrite file
            properties.store(fileOut, "Generated by System" + Converter.dateToString(Calendar.getInstance().getTime(), "YYYY-MMM-DD HH:mm"));
            fileOut.close();
            status = true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        return status;
    }
}